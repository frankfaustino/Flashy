// Code generated by Prisma (prisma@1.23.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  card: (where?: CardWhereInput) => Promise<boolean>;
  deck: (where?: DeckWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  card: (where: CardWhereUniqueInput) => CardPromise;
  cards: (
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Card>;
  cardsConnection: (
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CardConnectionPromise;
  deck: (where: DeckWhereUniqueInput) => DeckPromise;
  decks: (
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Deck>;
  decksConnection: (
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeckConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (
    args: { data: CardUpdateInput; where: CardWhereUniqueInput }
  ) => CardPromise;
  updateManyCards: (
    args: { data: CardUpdateManyMutationInput; where?: CardWhereInput }
  ) => BatchPayloadPromise;
  upsertCard: (
    args: {
      where: CardWhereUniqueInput;
      create: CardCreateInput;
      update: CardUpdateInput;
    }
  ) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createDeck: (data: DeckCreateInput) => DeckPromise;
  updateDeck: (
    args: { data: DeckUpdateInput; where: DeckWhereUniqueInput }
  ) => DeckPromise;
  updateManyDecks: (
    args: { data: DeckUpdateManyMutationInput; where?: DeckWhereInput }
  ) => BatchPayloadPromise;
  upsertDeck: (
    args: {
      where: DeckWhereUniqueInput;
      create: DeckCreateInput;
      update: DeckUpdateInput;
    }
  ) => DeckPromise;
  deleteDeck: (where: DeckWhereUniqueInput) => DeckPromise;
  deleteManyDecks: (where?: DeckWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  deck: (
    where?: DeckSubscriptionWhereInput
  ) => DeckSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission = "ADMIN" | "USER";

export type DeckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "front_ASC"
  | "front_DESC"
  | "back_ASC"
  | "back_DESC"
  | "progress_ASC"
  | "progress_DESC"
  | "dueDate_ASC"
  | "dueDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DeckWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  cards_every?: CardWhereInput;
  cards_some?: CardWhereInput;
  cards_none?: CardWhereInput;
  published?: Boolean;
  published_not?: Boolean;
  AND?: DeckWhereInput[] | DeckWhereInput;
  OR?: DeckWhereInput[] | DeckWhereInput;
  NOT?: DeckWhereInput[] | DeckWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  decks_every?: DeckWhereInput;
  decks_some?: DeckWhereInput;
  decks_none?: DeckWhereInput;
  cards_every?: CardWhereInput;
  cards_some?: CardWhereInput;
  cards_none?: CardWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  deck?: DeckWhereInput;
  front?: String;
  front_not?: String;
  front_in?: String[] | String;
  front_not_in?: String[] | String;
  front_lt?: String;
  front_lte?: String;
  front_gt?: String;
  front_gte?: String;
  front_contains?: String;
  front_not_contains?: String;
  front_starts_with?: String;
  front_not_starts_with?: String;
  front_ends_with?: String;
  front_not_ends_with?: String;
  back?: String;
  back_not?: String;
  back_in?: String[] | String;
  back_not_in?: String[] | String;
  back_lt?: String;
  back_lte?: String;
  back_gt?: String;
  back_gte?: String;
  back_contains?: String;
  back_not_contains?: String;
  back_starts_with?: String;
  back_not_starts_with?: String;
  back_ends_with?: String;
  back_not_ends_with?: String;
  progress?: Int;
  progress_not?: Int;
  progress_in?: Int[] | Int;
  progress_not_in?: Int[] | Int;
  progress_lt?: Int;
  progress_lte?: Int;
  progress_gt?: Int;
  progress_gte?: Int;
  dueDate?: DateTimeInput;
  dueDate_not?: DateTimeInput;
  dueDate_in?: DateTimeInput[] | DateTimeInput;
  dueDate_not_in?: DateTimeInput[] | DateTimeInput;
  dueDate_lt?: DateTimeInput;
  dueDate_lte?: DateTimeInput;
  dueDate_gt?: DateTimeInput;
  dueDate_gte?: DateTimeInput;
  AND?: CardWhereInput[] | CardWhereInput;
  OR?: CardWhereInput[] | CardWhereInput;
  NOT?: CardWhereInput[] | CardWhereInput;
}

export type DeckWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CardCreateInput {
  author: UserCreateOneWithoutCardsInput;
  deck: DeckCreateOneWithoutCardsInput;
  front: String;
  back: String;
  progress: Int;
  dueDate: DateTimeInput;
}

export interface UserCreateOneWithoutCardsInput {
  create?: UserCreateWithoutCardsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCardsInput {
  name: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  decks?: DeckCreateManyWithoutAuthorInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface DeckCreateManyWithoutAuthorInput {
  create?: DeckCreateWithoutAuthorInput[] | DeckCreateWithoutAuthorInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
}

export interface DeckCreateWithoutAuthorInput {
  title: String;
  description?: String;
  slug: String;
  cards?: CardCreateManyWithoutDeckInput;
  published?: Boolean;
}

export interface CardCreateManyWithoutDeckInput {
  create?: CardCreateWithoutDeckInput[] | CardCreateWithoutDeckInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
}

export interface CardCreateWithoutDeckInput {
  author: UserCreateOneWithoutCardsInput;
  front: String;
  back: String;
  progress: Int;
  dueDate: DateTimeInput;
}

export interface DeckCreateOneWithoutCardsInput {
  create?: DeckCreateWithoutCardsInput;
  connect?: DeckWhereUniqueInput;
}

export interface DeckCreateWithoutCardsInput {
  author: UserCreateOneWithoutDecksInput;
  title: String;
  description?: String;
  slug: String;
  published?: Boolean;
}

export interface UserCreateOneWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutDecksInput {
  name: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  cards?: CardCreateManyWithoutAuthorInput;
}

export interface CardCreateManyWithoutAuthorInput {
  create?: CardCreateWithoutAuthorInput[] | CardCreateWithoutAuthorInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
}

export interface CardCreateWithoutAuthorInput {
  deck: DeckCreateOneWithoutCardsInput;
  front: String;
  back: String;
  progress: Int;
  dueDate: DateTimeInput;
}

export interface CardUpdateInput {
  author?: UserUpdateOneRequiredWithoutCardsInput;
  deck?: DeckUpdateOneRequiredWithoutCardsInput;
  front?: String;
  back?: String;
  progress?: Int;
  dueDate?: DateTimeInput;
}

export interface UserUpdateOneRequiredWithoutCardsInput {
  create?: UserCreateWithoutCardsInput;
  update?: UserUpdateWithoutCardsDataInput;
  upsert?: UserUpsertWithoutCardsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutCardsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface DeckUpdateManyWithoutAuthorInput {
  create?: DeckCreateWithoutAuthorInput[] | DeckCreateWithoutAuthorInput;
  delete?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  disconnect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  update?:
    | DeckUpdateWithWhereUniqueWithoutAuthorInput[]
    | DeckUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | DeckUpsertWithWhereUniqueWithoutAuthorInput[]
    | DeckUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  updateMany?:
    | DeckUpdateManyWithWhereNestedInput[]
    | DeckUpdateManyWithWhereNestedInput;
}

export interface DeckUpdateWithWhereUniqueWithoutAuthorInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutAuthorDataInput;
}

export interface DeckUpdateWithoutAuthorDataInput {
  title?: String;
  description?: String;
  slug?: String;
  cards?: CardUpdateManyWithoutDeckInput;
  published?: Boolean;
}

export interface CardUpdateManyWithoutDeckInput {
  create?: CardCreateWithoutDeckInput[] | CardCreateWithoutDeckInput;
  delete?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  disconnect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  update?:
    | CardUpdateWithWhereUniqueWithoutDeckInput[]
    | CardUpdateWithWhereUniqueWithoutDeckInput;
  upsert?:
    | CardUpsertWithWhereUniqueWithoutDeckInput[]
    | CardUpsertWithWhereUniqueWithoutDeckInput;
  deleteMany?: CardScalarWhereInput[] | CardScalarWhereInput;
  updateMany?:
    | CardUpdateManyWithWhereNestedInput[]
    | CardUpdateManyWithWhereNestedInput;
}

export interface CardUpdateWithWhereUniqueWithoutDeckInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutDeckDataInput;
}

export interface CardUpdateWithoutDeckDataInput {
  author?: UserUpdateOneRequiredWithoutCardsInput;
  front?: String;
  back?: String;
  progress?: Int;
  dueDate?: DateTimeInput;
}

export interface CardUpsertWithWhereUniqueWithoutDeckInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutDeckDataInput;
  create: CardCreateWithoutDeckInput;
}

export interface CardScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  front?: String;
  front_not?: String;
  front_in?: String[] | String;
  front_not_in?: String[] | String;
  front_lt?: String;
  front_lte?: String;
  front_gt?: String;
  front_gte?: String;
  front_contains?: String;
  front_not_contains?: String;
  front_starts_with?: String;
  front_not_starts_with?: String;
  front_ends_with?: String;
  front_not_ends_with?: String;
  back?: String;
  back_not?: String;
  back_in?: String[] | String;
  back_not_in?: String[] | String;
  back_lt?: String;
  back_lte?: String;
  back_gt?: String;
  back_gte?: String;
  back_contains?: String;
  back_not_contains?: String;
  back_starts_with?: String;
  back_not_starts_with?: String;
  back_ends_with?: String;
  back_not_ends_with?: String;
  progress?: Int;
  progress_not?: Int;
  progress_in?: Int[] | Int;
  progress_not_in?: Int[] | Int;
  progress_lt?: Int;
  progress_lte?: Int;
  progress_gt?: Int;
  progress_gte?: Int;
  dueDate?: DateTimeInput;
  dueDate_not?: DateTimeInput;
  dueDate_in?: DateTimeInput[] | DateTimeInput;
  dueDate_not_in?: DateTimeInput[] | DateTimeInput;
  dueDate_lt?: DateTimeInput;
  dueDate_lte?: DateTimeInput;
  dueDate_gt?: DateTimeInput;
  dueDate_gte?: DateTimeInput;
  AND?: CardScalarWhereInput[] | CardScalarWhereInput;
  OR?: CardScalarWhereInput[] | CardScalarWhereInput;
  NOT?: CardScalarWhereInput[] | CardScalarWhereInput;
}

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export interface CardUpdateManyDataInput {
  front?: String;
  back?: String;
  progress?: Int;
  dueDate?: DateTimeInput;
}

export interface DeckUpsertWithWhereUniqueWithoutAuthorInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutAuthorDataInput;
  create: DeckCreateWithoutAuthorInput;
}

export interface DeckScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  AND?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  OR?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  NOT?: DeckScalarWhereInput[] | DeckScalarWhereInput;
}

export interface DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput;
  data: DeckUpdateManyDataInput;
}

export interface DeckUpdateManyDataInput {
  title?: String;
  description?: String;
  slug?: String;
  published?: Boolean;
}

export interface UserUpsertWithoutCardsInput {
  update: UserUpdateWithoutCardsDataInput;
  create: UserCreateWithoutCardsInput;
}

export interface DeckUpdateOneRequiredWithoutCardsInput {
  create?: DeckCreateWithoutCardsInput;
  update?: DeckUpdateWithoutCardsDataInput;
  upsert?: DeckUpsertWithoutCardsInput;
  connect?: DeckWhereUniqueInput;
}

export interface DeckUpdateWithoutCardsDataInput {
  author?: UserUpdateOneRequiredWithoutDecksInput;
  title?: String;
  description?: String;
  slug?: String;
  published?: Boolean;
}

export interface UserUpdateOneRequiredWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  update?: UserUpdateWithoutDecksDataInput;
  upsert?: UserUpsertWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutDecksDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  cards?: CardUpdateManyWithoutAuthorInput;
}

export interface CardUpdateManyWithoutAuthorInput {
  create?: CardCreateWithoutAuthorInput[] | CardCreateWithoutAuthorInput;
  delete?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  disconnect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  update?:
    | CardUpdateWithWhereUniqueWithoutAuthorInput[]
    | CardUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | CardUpsertWithWhereUniqueWithoutAuthorInput[]
    | CardUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: CardScalarWhereInput[] | CardScalarWhereInput;
  updateMany?:
    | CardUpdateManyWithWhereNestedInput[]
    | CardUpdateManyWithWhereNestedInput;
}

export interface CardUpdateWithWhereUniqueWithoutAuthorInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutAuthorDataInput;
}

export interface CardUpdateWithoutAuthorDataInput {
  deck?: DeckUpdateOneRequiredWithoutCardsInput;
  front?: String;
  back?: String;
  progress?: Int;
  dueDate?: DateTimeInput;
}

export interface CardUpsertWithWhereUniqueWithoutAuthorInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutAuthorDataInput;
  create: CardCreateWithoutAuthorInput;
}

export interface UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput;
  create: UserCreateWithoutDecksInput;
}

export interface DeckUpsertWithoutCardsInput {
  update: DeckUpdateWithoutCardsDataInput;
  create: DeckCreateWithoutCardsInput;
}

export interface CardUpdateManyMutationInput {
  front?: String;
  back?: String;
  progress?: Int;
  dueDate?: DateTimeInput;
}

export interface DeckCreateInput {
  author: UserCreateOneWithoutDecksInput;
  title: String;
  description?: String;
  slug: String;
  cards?: CardCreateManyWithoutDeckInput;
  published?: Boolean;
}

export interface DeckUpdateInput {
  author?: UserUpdateOneRequiredWithoutDecksInput;
  title?: String;
  description?: String;
  slug?: String;
  cards?: CardUpdateManyWithoutDeckInput;
  published?: Boolean;
}

export interface DeckUpdateManyMutationInput {
  title?: String;
  description?: String;
  slug?: String;
  published?: Boolean;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
  decks?: DeckCreateManyWithoutAuthorInput;
  cards?: CardCreateManyWithoutAuthorInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  decks?: DeckUpdateManyWithoutAuthorInput;
  cards?: CardUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CardWhereInput;
  AND?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
  OR?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
  NOT?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
}

export interface DeckSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeckWhereInput;
  AND?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  OR?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  NOT?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Card {
  id: ID_Output;
  front: String;
  back: String;
  progress: Int;
  dueDate: DateTimeOutput;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  deck: <T = DeckPromise>() => T;
  front: () => Promise<String>;
  back: () => Promise<String>;
  progress: () => Promise<Int>;
  dueDate: () => Promise<DateTimeOutput>;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  deck: <T = DeckSubscription>() => T;
  front: () => Promise<AsyncIterator<String>>;
  back: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<Int>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  decks: <T = FragmentableArray<Deck>>(
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cards: <T = FragmentableArray<Card>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Deck {
  id: ID_Output;
  title: String;
  description?: String;
  slug: String;
  published: Boolean;
}

export interface DeckPromise extends Promise<Deck>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  cards: <T = FragmentableArray<Card>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  published: () => Promise<Boolean>;
}

export interface DeckSubscription
  extends Promise<AsyncIterator<Deck>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeckConnection {
  pageInfo: PageInfo;
  edges: DeckEdge[];
}

export interface DeckConnectionPromise
  extends Promise<DeckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeckEdge>>() => T;
  aggregate: <T = AggregateDeckPromise>() => T;
}

export interface DeckConnectionSubscription
  extends Promise<AsyncIterator<DeckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeckSubscription>() => T;
}

export interface DeckEdge {
  node: Deck;
  cursor: String;
}

export interface DeckEdgePromise extends Promise<DeckEdge>, Fragmentable {
  node: <T = DeckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeckEdgeSubscription
  extends Promise<AsyncIterator<DeckEdge>>,
    Fragmentable {
  node: <T = DeckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeck {
  count: Int;
}

export interface AggregateDeckPromise
  extends Promise<AggregateDeck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeckSubscription
  extends Promise<AsyncIterator<AggregateDeck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface CardPreviousValues {
  id: ID_Output;
  front: String;
  back: String;
  progress: Int;
  dueDate: DateTimeOutput;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  front: () => Promise<String>;
  back: () => Promise<String>;
  progress: () => Promise<Int>;
  dueDate: () => Promise<DateTimeOutput>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  front: () => Promise<AsyncIterator<String>>;
  back: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<Int>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeckSubscriptionPayload {
  mutation: MutationType;
  node: Deck;
  updatedFields: String[];
  previousValues: DeckPreviousValues;
}

export interface DeckSubscriptionPayloadPromise
  extends Promise<DeckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeckPreviousValuesPromise>() => T;
}

export interface DeckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeckPreviousValuesSubscription>() => T;
}

export interface DeckPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  slug: String;
  published: Boolean;
}

export interface DeckPreviousValuesPromise
  extends Promise<DeckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface DeckPreviousValuesSubscription
  extends Promise<AsyncIterator<DeckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Card",
    embedded: false
  },
  {
    name: "Deck",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
